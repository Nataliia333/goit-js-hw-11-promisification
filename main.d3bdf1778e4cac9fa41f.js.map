{"version":3,"sources":["webpack:///./task-1.js","webpack:///./task-2.js","webpack:///./task-3.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAKMA,EAAQ,SAAAC,GAEV,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBC,YAAW,WAAOF,EAAQF,KACvBA,OAIHK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,G,kCCfbK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAsBrBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAId,SAAQ,SAACC,EAASC,GAI1BD,EAHqBY,EAASE,KAAI,SAAAC,GAAI,OACnCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAMjEZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCCnC,IAIMe,EAAkB,SAAAC,GACpB,IAL+BC,EAAKC,EAK9BxB,GALyBuB,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMpD,OAAO,IAAIrB,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACUoB,KAAKE,SAAW,GAG/BxB,EAAQmB,EAAYM,GAAI5B,GAExBI,EAAOkB,EAAYM,MAEpB5B,OAIL6B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIrB,EAAW,EAAXA,KAC1BC,QAAQC,IAAR,eAA2BmB,EAA3B,iBAA8CrB,EAA9C,OAGMuB,EAAW,SAAAF,GACjBpB,QAAQuB,KAAR,gCAA6CH,EAA7C,8BAEEP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOtB,KAAKmB,GAAYI,MAAMH,GAEhET,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOtB,KAAKmB,GAAYI,MAAMH,GAEhET,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAAMtB,KAAKmB,GAAYI,MAAMH,GAE/DT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOtB,KAAKmB,GAAYI,MAAMH,K","file":"main.d3bdf1778e4cac9fa41f.js","sourcesContent":["// Задание 1\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" \r\n// через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд \r\n// которое передали во время вызова функции delay.\r\n\r\nconst delay = ms => {\r\n    // Твой код\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {resolve(ms);\r\n        }, ms);\r\n    });\r\n};\r\n    \r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms","//   Задание 2\r\n//  Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback,\r\n//  а принимала всего два параметра allUsers и userName и возвращала промис.\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  \r\n//   const toggleUserState = (allUsers, userName, callback) => {\r\n//     const updatedUsers = allUsers.map(user =>\r\n//       user.name === userName ? { ...user, active: !user.active } : user,\r\n//     );\r\n  \r\n//     callback(updatedUsers);\r\n//   };\r\n  \r\n//   const logger = updatedUsers => console.table(updatedUsers);\r\n  \r\n  /*\r\n   * Сейчас работает так\r\n   */\r\n//   toggleUserState(users, 'Mango', logger);\r\n//   toggleUserState(users, 'Lux', logger);\r\n  \r\n  /*\r\n   * Должно работать так\r\n   */\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve, reject) => {\r\n       const updatedUsers = allUsers.map(user =>\r\n          user.name === userName ? { ...user, active: !user.active } : user,\r\n        );\r\n       resolve(updatedUsers);\r\n       });\r\n};\r\n      \r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","// Задание 3\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, \r\n// а принимала всего один параметр transaction и возвращала промис.\r\n\r\n\r\n// const randomIntegerFromInterval = (min, max) => {\r\n//     return Math.floor(Math.random() * (max - min + 1) + min);\r\n//   };\r\n  \r\n//   const makeTransaction = (transaction, onSuccess, onError) => {\r\n//     const delay = randomIntegerFromInterval(200, 500);\r\n  \r\n//     setTimeout(() => {\r\n//       const canProcess = Math.random() > 0.3;\r\n  \r\n//       if (canProcess) {\r\n//         onSuccess(transaction.id, delay);\r\n//       } else {\r\n//         onError(transaction.id);\r\n//       }\r\n//     }, delay);\r\n//   };\r\n  \r\n//   const logSuccess = (id, time) => {\r\n//     console.log(`Transaction ${id} processed in ${time}ms`);\r\n//   };\r\n  \r\n//   const logError = id => {\r\n//     console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n//   };\r\n  \r\n  /*\r\n   * Работает так\r\n   */\r\n//   makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n//   makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n//   makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n//   makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n  /*\r\n   * Должно работать так\r\n   */\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n      \r\nconst makeTransaction = transaction => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n      \r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n      \r\n        if (canProcess) {\r\n            resolve(transaction.id, delay);\r\n        } else {\r\n            reject(transaction.id);\r\n          }\r\n        }, delay);\r\n      });\r\n};\r\n      \r\nconst logSuccess = ({ id, time }) => {\r\nconsole.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n      \r\nconst logError = id => {\r\nconsole.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n  \r\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n  \r\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n  \r\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"],"sourceRoot":""}